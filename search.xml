<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[指针浅谈]]></title>
      <url>/2020/05/04/%E6%8C%87%E9%92%88%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<p><img src="/images/Pointer/Pointer_Background.jpg" alt="post-cover"></p>
<p>此篇博客是由日常阅读、总结的文章，旨在通过通俗易懂的文字理解C/C++中的指针。</p>
<h2 id="一、什么是指针？"><a href="#一、什么是指针？" class="headerlink" title="一、什么是指针？"></a>一、什么是指针？</h2><!-- &nbsp;表示一个空格 -->
<p>首先，提一句我看到过的让我理解指针最形象的比喻：<strong>变量和指向该变量的指针是同一个硬币的两面</strong>。我们从以下代码片段进行阐述：</p>
<pre><code>int value = 5;//①
int* pointer = &amp;value;//②
cout &lt;&lt; pointer &lt;&lt; endl;//③
cout &lt;&lt; *pointer &lt;&lt; endl;//④
</code></pre><blockquote>
<ul>
<li>①表示变量value的值是5，数据类型int，int类型占用存储空间一般是4个字节，因为计算机世界里只有0和1，所以变量value在<code>大端模式</code>的计算机世界里是长这个样子的:00000000 00000000 00000000 00000101,其中8个bit表示1个byte。不同的数据类型，其存储空间大小不一样，可以理解为不同大小的鞋子应该放在不同大小的鞋盒里面。value存储在计算机某块内存中，内存地址对程序员不直接可见，这里假设我们使用的机器是32位的，并假设变量value的内存地址的值的16进制表示为0x12345678</li>
<li>②表示指针变量pointer指向变量value的地址，可以把这一行中的＆符号理解为”取地址操作”，只有取地址操作后，等于号”=”右边的值才是指针类型，类型相同才能赋值这是基础语法。</li>
<li>③是C++语法的输出语句，效果同C中println，其输出值为0x12345678，说明指针变量的值就是它所指向的变量value的内存地址的值，pointer既然也称之为变量，那就一定也要占据存储空间，指针的大小由<code>内存寻址空间</code>决定（即x86还是x64），刚才说pointer的值是0x12345678，所以它在大端模式计算机里长这样:00010010 00110100 01010110 01111000</li>
<li>④也是输出语句，输出值为5，表示指针变量pointer所指向的那个地址的实际存储的内容是整数5，这里*符号理解为”解引用操作”，意思就是把pointer指针指向的地址的值取出来。</li>
</ul>
</blockquote>
<p>所以，实际上，指针变量pointer的值是变量value的地址，变量value的值既可以用指向它自己的指针通过”解引用操作”表示，又能用该变量自己表示。</p>
<p><em>那为什么需要指针这个概念呢？</em></p>
<p>我个人的理解是便于操作，减少变量，因为指针也可以加1减1这样操作的，比如说上面提到的指针pointer+1，结果将是0x1234567C，因为pointer存储空间是4个字节，它加1相当于把它指向的地址往后移动4个字节(16进制的8加上4等于C，不需要进位，所以前面的7不变)，假如我有一万个在存储空间中相邻排布的相同类型的变量，我可以用一个该类型的指针变量表示这一万个值，因为我移动该指针的地址就行了，然后”解引用操作”取出该地址存储的值。你可能会说我也可以用a表示所有啊，a=3，用完之后a=4，并非如此，你说的这个a在它的作用域内的地址是固定的，从3改为4是指把a实际存储的值变化了，用指针当然也可以改变其中实际的值，不过更多的是通过一个指针变量取出存储在不同地址的值。另外值得一提到是，上面说的指针变量pointer，刚才只说了它的值是value的地址，那它肯定也有自己的地址啊，没错，它肯定也有地址，它的地址将会是某个二级指针的值，也就是**这个玩意儿了。</p>
<hr>
<p><strong>脚下留心：</strong></p>
<p><strong>1.大端模式与小端模式</strong></p>
<p>大小端的问题是由CPU决定的，它表示的是对内存中排布的数据的不同解析方式。</p>
<p>假设一个占4个byte的int类型变量的值固定是0x12345678（其中我们称12在高字节位，78在低字节位）。如果该变量在内存空间中如下排布（其中我们称0x100在低地址位，0x103在高地址位），则表示高字节位的12排布在低地址0x100上，说明此款CPU是以大端方式进行解析的。</p>
<table>
<thead>
<tr>
<th>数据存储地址</th>
<th style="text-align:center">…</th>
<th style="text-align:center">0x100</th>
<th style="text-align:center">0x101</th>
<th style="text-align:center">0x102</th>
<th style="text-align:center">0x103</th>
<th>…</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>数据存储值</strong></td>
<td style="text-align:center"><strong>…</strong></td>
<td style="text-align:center"><strong>12</strong></td>
<td style="text-align:center"><strong>34</strong></td>
<td style="text-align:center"><strong>56</strong></td>
<td style="text-align:center"><strong>78</strong></td>
<td><strong>…</strong></td>
</tr>
</tbody>
</table>
<p>如果该变量在内存空间中如下排布，则表示高字节位的12排布在高地址0x103上，说明此款CPU是以小端方式进行解析的。</p>
<table>
<thead>
<tr>
<th>数据存储地址</th>
<th style="text-align:center">…</th>
<th style="text-align:center">0x100</th>
<th style="text-align:center">0x101</th>
<th style="text-align:center">0x102</th>
<th style="text-align:center">0x103</th>
<th>…</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>数据存储值</strong></td>
<td style="text-align:center"><strong>…</strong></td>
<td style="text-align:center"><strong>78</strong></td>
<td style="text-align:center"><strong>56</strong></td>
<td style="text-align:center"><strong>34</strong></td>
<td style="text-align:center"><strong>12</strong></td>
<td><strong>…</strong></td>
</tr>
</tbody>
</table>
<p><strong>2.内存寻址空间</strong></p>
<p>我们都听说过x86操作系统和x64操作系统的概念，其实就是说32位和64位操作系统，但与之对应的应该是硬件处理器CPU，操作系统本质上还是一款软件，它的绝对性能取决于底层硬件设备。什么是内存寻址空间？我们知道32位的CPU连接32根地址线，那么它总共可以表示2^32^个内存地址，每个内存地址指向内存中的一个byte，所以总共2^32^bytes=4G，即32位的电脑最多可利用的内存空间是4G，亦即32位的电脑只需配4G的内存条就够了，多了也是浪费，根本利用不上。</p>
<hr>
<h2 id="二、指针与数组"><a href="#二、指针与数组" class="headerlink" title="二、指针与数组"></a>二、指针与数组</h2><p>惯例，先上代码段：</p>
<pre><code>int arrayA[3] = {6, 7, 8};//①
int* p_arrayA = arrayA;//②
</code></pre><blockquote>
<ul>
<li>①是初始化一个长度为3的int型数组<code>arrayA</code></li>
<li>②是将一个int类型指针<code>p_arrayA</code>指向该数组</li>
</ul>
</blockquote>
<p>这两行代码不报错说明什么呢？说明数组名其实可以当做指针，该指针指向本数组中首个元素，即6所在的地址，而指针<code>p_arrayA</code>也指向数组的首个元素的地址。</p>
<p><em>它俩有什么区别？</em></p>
<blockquote>
<ul>
<li>指针的值可修改，而数组名是常量。这里提到常量，常量指不可更改的值，比如说出生日期。常量相对而言的是变量，比如说年龄。刚才提到的<code>p_arrayA</code>是变量，<code>arrayA</code>是常量对应代码的表现就是:<br><code>p_arrayA = p_arrayA + 1； // 合理</code><br><code>arrayA = arrayA + 1；// 报错</code><br>虽然不能显式的给<code>arrayA</code>重新赋值，但是用它来取值是可以的，比如说<code>arrayA[1]</code>和<code>*(arrayA+1)</code>都是数组<code>arrayA</code>的第二个变量的值，即7。</li>
<li>对数组名应用sizeof运算符得到的是该数组的占用内存空间的大小(单位是byte)，对指针应用sizeof运算符得到的是该类型的指针变量的大小。<br><em>为什么说sizeof是运算符？</em><br>因为sizeof返回的单位是byte，即变量实际占用的内存大小，而<code>size（）</code>或者<code>length（）</code>这样的函数返回值一般是数组的长度，即数组成员是多少个。</li>
</ul>
</blockquote>
<p>综上，数组名<code>arrayA</code>可以当做指针用，所以以后看到<code>*(arrayA++)</code>这样的代码不要奇怪。最后，我曾经自己写例子得到指向<code>&amp;arrayA</code>的指针是一个<code>int(*)[3]</code>类型的，<code>int(*)[3]</code>可以理解为长度为3的int类型数组的指针。</p>
<hr>
<h2 id="三、new和delete，申请、释放内存空间"><a href="#三、new和delete，申请、释放内存空间" class="headerlink" title="三、new和delete，申请、释放内存空间"></a>三、new和delete，申请、释放内存空间</h2>]]></content>
      
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 个人小结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Internet Protocol(1)]]></title>
      <url>/2017/08/12/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE(%E4%BB%8E%E7%B3%BB%E7%BB%9F%E8%A7%92%E5%BA%A6%E8%A7%A3%E8%AF%BB)/</url>
      <content type="html"><![CDATA[<p>  <img src="/images/InternetProtocol/Background.jpg" alt="post-cover"><br>参考链接：<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="external">阮一峰前辈的学习博客</a></p>
<hr>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>你是否有过疑惑，全球几十亿台计算机是<code>如何</code>通过互联网实现信息传递的？</p>
<p>下面是我参考各前辈的学习笔记写下的关于互联网协议的文章。因为这些协议实在太复杂、太庞大，在这里整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，其中做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。</p>
<hr>
<h2 id="二、概述"><a href="#二、概述" class="headerlink" title="二、概述"></a>二、概述</h2><h3 id="2-1-七层模型"><a href="#2-1-七层模型" class="headerlink" title="2.1 七层模型"></a>2.1 七层模型</h3><p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>
<p>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p>
<p>下面是ISO定义网络的标准层次模型。</p>
<p>  <img src="/images/InternetProtocol/one.png" style="width: 800px;"></p>
<p>如上图所示，最底下的一层叫做”物理层”-<code>Physical Layer</code>，最上面的一层叫做”应用层”-<code>Application Layer</code>，中间的五层（自下而上）分别是”链接层”-<code>Link Layer</code>、”网络层”-<code>Network Layer</code>、”传输层”-<code>Transport Layer</code>、”会话层”-<code>Session Layer</code>和”表现层”-<code>Presentation layer</code>。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>
<p>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p>
<h3 id="2-2-层与协议"><a href="#2-2-层与协议" class="headerlink" title="2.2 层与协议"></a>2.2 层与协议</h3><p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。</p>
<p>大家都遵守的规则，就叫做”协议”-<code>protocol</code>。</p>
<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做”互联网协议”-<code>Internet Protocol Suite</code>。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p>
<hr>
<h2 id="三、物理层"><a href="#三、物理层" class="headerlink" title="三、物理层"></a>三、物理层</h2><p>我们从最底下的一层开始。</p>
<p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p>
<p>  <img src="/images/InternetProtocol/two.png" style="width: 600px;"></p>
<p><strong>这就叫做”物理层”，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</strong></p>
<hr>
<h2 id="四、链接层"><a href="#四、链接层" class="headerlink" title="四、链接层"></a>四、链接层</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>
<p><strong>这就是”链接层”的功能，它在”物理层”的上方，确定了0和1的分组方式。</strong></p>
<h3 id="4-2-以太网协议"><a href="#4-2-以太网协议" class="headerlink" title="4.2 以太网协议"></a>4.2 以太网协议</h3><p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做”<a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91" target="_blank" rel="external">以太网</a>“-<code>Ethernet</code>的协议，占据了主导地位。</p>
<p>以太网规定，一组电信号构成一个数据包，叫做”<a href="https://zh.wikipedia.org/wiki/%E5%B8%A7" target="_blank" rel="external">帧</a>“-<code>Frame</code>。每一帧分成两个部分：标头-<code>Head</code>和数据-<code>Data</code>。</p>
<p>  <img src="/images/InternetProtocol/three.png" style="width: 600px;"></p>
<p>“标头”包含数据包的一些说明项，比如发送者、接受者、数据类型等等；”数据”则是数据包的具体内容。</p>
<p>“标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>
<h3 id="4-3-MAC地址"><a href="#4-3-MAC地址" class="headerlink" title="4.3 MAC地址"></a>4.3 MAC地址</h3><p>上面提到，以太网数据包的”标头”，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？</p>
<p>以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做<code>MAC</code>地址。</p>
<p>  <img src="/images/InternetProtocol/four.jpg" style="width: 450px;"></p>
<p>每块网卡出厂的时候，都有一个全世界独一无二的<code>MAC</code>地址，长度是48个二进制位，通常用12个<code>十六进制</code>数表示。</p>
<p>  <img src="/images/InternetProtocol/five.png" style="width: 450px;"></p>
<p>前6个<code>十六进制</code>数是厂商编号，后6个是该厂商的网卡流水号。有了<code>MAC</code>地址，就可以定位网卡和数据包的路径了。</p>
<h3 id="4-4-广播"><a href="#4-4-广播" class="headerlink" title="4.4 广播"></a>4.4 广播</h3><p>定义地址只是第一步，后面还有更多的步骤。</p>
<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>
<p>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的<code>MAC</code>地址，然后才能发送。</p>
<p>其次，就算有了<code>MAC</code>地址，系统怎样才能把数据包准确送到接收方？</p>
<p>回答是以太网采用了一种很”原始”的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>
<p>  <img src="/images/InternetProtocol/six.png" style="width: 600px;"></p>
<p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的”标头”，找到接收方的<code>MAC</code>地址，然后与自身的<code>MAC</code>地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做”<a href="https://zh.wikipedia.org/wiki/%E5%BB%A3%E6%92%AD_(%E7%B6%B2%E8%B7%AF" target="_blank" rel="external">广播</a>“-<code>broadcasting</code>。</p>
<p>有了数据包的定义、网卡的<code>MAC</code>地址、广播的发送方式，”链接层”就可以在多台计算机之间传送数据了。</p>
<hr>
<h2 id="五、网络层"><a href="#五、网络层" class="headerlink" title="五、网络层"></a>五、网络层</h2><h3 id="5-1-网络层的由来"><a href="#5-1-网络层的由来" class="headerlink" title="5.1 网络层的由来"></a>5.1 网络层的由来</h3><p>以太网协议，依靠<code>MAC</code>地址发送数据。理论上，单单依靠<code>MAC</code>地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>
<p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一”包”，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p>
<p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p>
<p>  <img src="/images/InternetProtocol/seven.png" style="width: 600px;"></p>
<p>因此，必须找到一种方法，能够区分哪些<code>MAC</code>地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用”路由”方式发送。（”路由”的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，<code>MAC</code>地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>
<p><strong>这就导致了”网络层”的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做”网络地址”，简称”网址”。</strong></p>
<p>于是，”网络层”出现以后，每台计算机有了两种地址，一种是<code>MAC</code>地址，另一种是网络地址。两种地址之间没有任何联系，<code>MAC</code>地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p>
<p>网络地址帮助我们确定计算机所在的子网络，<code>MAC</code>地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理<code>MAC</code>地址。</p>
<h3 id="5-2-IP协议"><a href="#5-2-IP协议" class="headerlink" title="5.2 IP协议"></a>5.2 IP协议</h3><p>规定网络地址的协议，叫做<code>IP</code>协议。它所定义的地址，就被称为<code>IP</code>地址。</p>
<p>目前，广泛采用的是<code>IP</code>协议第四版，简称IPv4。这个版本规定，网络地址由32个<code>二进制</code>位组成。</p>
<p>  <img src="/images/InternetProtocol/eight.png" style="width: 450px;"></p>
<p>习惯上，我们用分成四段的十进制数表示<code>IP</code>地址，从<strong>0.0.0.0</strong>一直到<strong>255.255.255.255</strong>。</p>
<p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，<code>IP</code>地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p>
<p>但是，问题在于单单从<code>IP</code>地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从<code>IP</code>地址上是看不出来的。</p>
<p>那么，怎样才能从<code>IP</code>地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%BD%91#.E7.BD.91.E7.BB.9C.E6.8E.A9.E7.A0.81" target="_blank" rel="external">子网掩码</a>“-<code>subnet mask</code>。</p>
<p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，<code>IP</code>地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p>
<p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个<code>IP</code>地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>
<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是<strong>255.255.255.0</strong>，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>
<p><strong>总结一下，<code>IP</code>协议的作用主要有两个，一个是为每一台计算机分配<code>IP</code>地址，另一个是确定哪些地址在同一个子网络。</strong></p>
<h3 id="5-3-IP数据包"><a href="#5-3-IP数据包" class="headerlink" title="5.3 IP数据包"></a>5.3 IP数据包</h3><p>根据IP协议发送的数据，就叫做<code>IP</code>数据包。不难想象，其中必定包括<code>IP</code>地址信息。</p>
<p>但是前面说过，以太网数据包只包含<code>MAC</code>地址，并没有<code>IP</code>地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>
<p>回答是不需要，我们可以把<code>IP</code>数据包直接放进以太网数据包的”数据”部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p>
<p>具体来说，<code>IP</code>数据包也分为”标头”和”数据”两个部分。</p>
<p>  <img src="/images/InternetProtocol/nine.png" style="width: 600px;"></p>
<p>“标头”部分主要包括版本、长度、<code>IP</code>地址等信息，”数据”部分则是<code>IP</code>数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。</p>
<p>  <img src="/images/InternetProtocol/ten.png" style="width: 600px;"></p>
<p><code>IP</code>数据包的”标头”部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个<code>IP</code>数据包的”数据”部分，最长为65,515字节。前面说过，以太网数据包的”数据”部分，最长只有1500字节。因此，如果<code>IP</code>数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p>
<h3 id="5-4-ARP协议"><a href="#5-4-ARP协议" class="headerlink" title="5.4 ARP协议"></a>5.4 ARP协议</h3><p>关于”网络层”，还有最后一点需要说明。</p>
<p>因为<code>IP</code>数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的<code>MAC</code>地址，另一个是对方的<code>IP</code>地址。通常情况下，对方的<code>IP</code>地址是已知的（后文会解释），但是我们不知道它的<code>MAC</code>地址。</p>
<p>所以，我们需要一种机制，能够从<code>IP</code>地址得到<code>MAC</code>地址。</p>
<p>这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的<code>MAC</code>地址，只能把数据包传送到两个子网络连接处的”<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E5%85%B3" target="_blank" rel="external">网关</a>“-<code>gateway</code>，让网关去处理。</p>
<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的<code>MAC</code>地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的<code>IP</code>地址，在对方的<code>MAC</code>地址这一栏，填的是<strong>FF:FF:FF:FF:FF:FF</strong>，表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出<code>IP</code>地址，与自身的<code>IP</code>地址进行比较。如果两者相同，都做出回复，向对方报告自己的<code>MAC</code>地址，否则就丢弃这个包。</p>
<p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机<code>MAC</code>地址，可以把数据包发送到任意一台主机之上了。</p>
<hr>
<h2 id="六、传输层"><a href="#六、传输层" class="headerlink" title="六、传输层"></a>六、传输层</h2><h3 id="6-1-传输层的由来"><a href="#6-1-传输层的由来" class="headerlink" title="6.1 传输层的由来"></a>6.1 传输层的由来</h3><p>有了<code>MAC</code>地址和<code>IP</code>地址，我们已经可以在互联网上任意两台主机上建立通信。</p>
<p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p>
<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E8%A8%8A%E5%9F%A0" target="_blank" rel="external">端口</a>“-<code>port</code>，它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p>
<p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>
<p><strong>“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。</strong>因此，Unix系统就把主机+端口，叫做”<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E6%8F%92%E5%BA%A7" target="_blank" rel="external">套接字</a>“-<code>socket</code>。有了它，就可以进行网络应用程序开发了。</p>
<h3 id="6-2-UDP协议"><a href="#6-2-UDP协议" class="headerlink" title="6.2 UDP协议"></a>6.2 UDP协议</h3><p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>
<p>UDP数据包，也是由”标头”和”数据”两部分组成。</p>
<p>  <img src="/images/InternetProtocol/eleven.png" style="width: 600px;"></p>
<p>“标头”部分主要定义了发出端口和接收端口，”数据”部分就是具体的内容。然后，把整个UDP数据包放入<code>IP</code>数据包的”数据”部分，而前面说过，<code>IP</code>数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p>
<p>  <img src="/images/InternetProtocol/twelve.png" style="width: 600px;"></p>
<p>UDP数据包非常简单，”标头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个<code>IP</code>数据包。</p>
<h3 id="6-3-TCP协议"><a href="#6-3-TCP协议" class="headerlink" title="6.3 TCP协议"></a>6.3 TCP协议</h3><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>
<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p>
<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>
<p>TCP数据包和UDP数据包一样，都是内嵌在<code>IP</code>数据包的”数据”部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<hr>
<h2 id="七、会话层"><a href="#七、会话层" class="headerlink" title="七、会话层"></a>七、会话层</h2><p>会话层利用传输层来提供会话服务，会话可能是一个用户通过网络登录到一个主机，或一个正在建立的用于传输文件的会话。<br>会话层的功能主要有：会话连接到传输连接的映射、数据传送、会话连接的恢复和释放、会话管理、令牌管理和活动管理。 </p>
<hr>
<h2 id="八、表示层"><a href="#八、表示层" class="headerlink" title="八、表示层"></a>八、表示层</h2><p>表示层用于数据管理的表示方式，如用于文本文件的ASCII和EBCDIC，用于表示数字的1S或2S补码表示形式。如果通信双方用不同的数据表示方法，他们就不能互相理解。表示层就是用于屏蔽这种不同之处。<br>表示层的功能主要有：数据语法转换、语法表示、表示连接管理、数据加密和数据压缩。 </p>
<hr>
<h2 id="九、应用层"><a href="#九、应用层" class="headerlink" title="九、应用层"></a>九、应用层</h2><p>应用程序收到”传输层”的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>
<p><strong>“应用层”的作用，就是规定应用程序的数据格式。</strong></p>
<p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p>
<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的”数据”部分。因此，现在的以太网的数据包就变成下面这样。</p>
<p>  <img src="/images/InternetProtocol/thirteen.png" style="width: 600px;"></p>
<p>至此，整个互联网的七层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。</p>
]]></content>
      
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> Internet Protocol </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建网站教程]]></title>
      <url>/2017/08/06/Hexo/</url>
      <content type="html"><![CDATA[<p><img src="/images/Background.jpg" alt="post-cover"></p>
<p>这是第一篇博客，主要介绍hexo搭建网站的过程<br><a id="more"></a></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title=" 1.前言"></a> 1.前言</h1><p><strong>使用github pages服务搭建博客的好处有：</strong></p>
<blockquote>
<p>1.全是静态文件访问速度快<br>  2.免费方便，不花一分钱就能搭建一个自由的个人博客<br>  3.可以绑定自己的域名，不仔细看看不出是github的</p>
</blockquote>
<h2 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title=" 1.1  准备工作"></a> 1.1  准备工作</h2><blockquote>
<p><strong>注意：</strong>在开始一切之前，你必须已经：</p>
<ul>
<li>有一个github账号，没有的话去注册一个；</li>
<li>安装了node.js、npm，并了解相关基础知识；</li>
<li>安装了git for windows（或者其它git客户端）</li>
</ul>
</blockquote>
<p> <strong>本文所使用的环境：</strong></p>
<blockquote>
<ul>
<li>window8.1 x 64</li>
<li>node.js    6.11.x</li>
<li>git     2.12.x</li>
<li>hexo   </li>
</ul>
</blockquote>
<h1 id="2-搭建github博客"><a href="#2-搭建github博客" class="headerlink" title=" 2.搭建github博客"></a> 2.搭建github博客</h1><h2 id="2-1创建仓库"><a href="#2-1创建仓库" class="headerlink" title=" 2.1创建仓库"></a> 2.1创建仓库</h2><blockquote>
<p>1.新建一个名字为<code>你的用户名.github.io</code>的仓库,以我自己的用户名为例,我的用户名为JiangLingJun，那么我的仓库名就是<code>JiangLingJun.github.io</code><br>2.你将来的博客的网址即为 <a href="https://JiangLingJun.github.io" target="_blank" rel="external">https://JiangLingJun.github.io</a></p>
</blockquote>
<p>脚下留心：</p>
<blockquote>
<p>1.注册邮箱一定要验证，否则建不了仓库<br>2.仓库名称必须是： <code>你的用户名.github.io</code>,其中你的用户名必须和你登录的一样<br>3.仓库的创建不会立即生效，有可能需要等10~30分钟，或者更久</p>
</blockquote>
<h2 id="2-2绑定域名"><a href="#2-2绑定域名" class="headerlink" title="2.2绑定域名"></a>2.2绑定域名</h2><ul>
<li>你不绑定域名也是可以的，那你就默认访问 xxx.github.io就好</li>
<li>但是我们都想个性一点，拥有我们自己的域名不是吗？我这里用的是阿里云购买的一个域名，价格也不太贵，对学生还有优惠。</li>
<li><p>域名绑定有2种方式，CNAME和A记录，CNAME是要填写域名的，A是要填写IP 的。<br>1.A记录型（填写ip），你需要ping一下 <code>你的用户名.github.io</code> 然后将ip地址和域名进行绑定<br>2.CNAME型（填写域名），需要你将自己的域名和github的域名进行 绑定<br><img src="/images/CreateMyBlog01.png" style="width: 600px;"></p>
<p>然后你要到自己的github项目的根目录下新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你的喜好，因为经过测试</p>
</li>
</ul>
<blockquote>
<ul>
<li>如果你填写的是没有www的，比如 yoursite.xyz 那么无论访问 <a href="http://yoursize.xyz" target="_blank" rel="external">http://yoursize.xyz</a> 还是 <a href="http://yoursite.xyz" target="_blank" rel="external">http://yoursite.xyz</a> 都会自动跳转到 <a href="http://yoursite.xyz" target="_blank" rel="external">http://yoursite.xyz</a></li>
<li>如果你写的是带www的，比如  www.yoursite.xyz  那么无论是访问 <a href="http://www.yoursite.xyz" target="_blank" rel="external">http://www.yoursite.xyz</a> 还是 <a href="http://yoursite.xyz都会自动跳转到" target="_blank" rel="external">http://yoursite.xyz都会自动跳转到</a> <a href="http://www.yoursite.xyz" target="_blank" rel="external">http://www.yoursite.xyz</a></li>
<li>如果你填写其他的子域名，比如 aaa.yoursite.xyz ,那么访问 <a href="http://aaa.yoursite.xyz" target="_blank" rel="external">http://aaa.yoursite.xyz</a> 没有问题，但是访问 <a href="http://yoursite.xyz" target="_blank" rel="external">http://yoursite.xyz</a> 不会跳转到 <a href="http://abc.yoursite.xyz" target="_blank" rel="external">http://abc.yoursite.xyz</a></li>
</ul>
</blockquote>
<p>补充：在绑定域名后，原来的域名<code>你的用户名.github.io</code>，没有失效而是会自动跳转的你的新域名。</p>
<h1 id="3-配置-SSH-key"><a href="#3-配置-SSH-key" class="headerlink" title="3.配置 SSH key"></a>3.配置 SSH key</h1><p>配置原因：提交代码到github需要权限，但是直接使用用户名和密码 不安全，我们使用ssh key来解决本地和服务器之间的连接问题</p>
<pre><code>$cd ~/.ssh  #检查本地存在的ssh秘钥
</code></pre><p>如果提示：No such file or directory 说明你是第一次使用git</p>
<pre><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;
</code></pre><p>然后连续3次回车，最终会生成ssh key在用户的目录下，打开你自己的用户目录 ，在里面找到 .ssh\id_rsa.pub 文件，记事本打开，并且复制里面内容，然后打开你的github主页， 进入个人设置 –》 SSH and GPG keys – 》 New SSH key<br><img src="/images/CreateMyBlog02.png" style="width: 600px;"></p>
<p>然后将刚复制的内容粘贴到key那里，title随便填，保存</p>
<h2 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h2><pre><code>$ ssh -T git@github.com
</code></pre><p>如果提示<code>Are you sure you want to continue to connecting(yes/no)?</code>,然后输入yes，然后会看到</p>
<blockquote>
<p>hi ，xxx ! You’ve successfully authenticated , but GitHub does not provide shell access.</p>
</blockquote>
<p>看到这个说明SSH配置成功<br>此时你还需要配置：</p>
<pre><code>$ git config --global user.name &quot;xxx&quot;  # 你的github用户名
$ git config --global user.email &quot;xxx&quot;   # 你的邮箱名 
</code></pre><h1 id="4-使用hexo写博客"><a href="#4-使用hexo写博客" class="headerlink" title="4.使用hexo写博客"></a>4.使用hexo写博客</h1><h2 id="4-1-hexo简介"><a href="#4-1-hexo简介" class="headerlink" title="4.1 hexo简介"></a>4.1 hexo简介</h2><p>hexo 是一个简单、快速、强大的基于github pages 的博客发布工具，支持Markdown格式，有许多优秀插件和主题</p>
<p>官网：  <a href="http://hexo.io" target="_blank" rel="external">http://hexo.io</a><br>github :  <a href="https://github.com/hexojs/hexo" target="_blank" rel="external">https://github.com/hexojs/hexo</a></p>
<h2 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2 原理"></a>4.2 原理</h2><p>   由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<h2 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3 注意事项"></a>4.3 注意事项</h2><p>脚下留心：</p>
<blockquote>
<p>1.很多命令既可以用windows的cmd来完成，也可以用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；<br>2.hexo不同版本的差别较大，网上很多文章是基于2.x的，不要被误导<br>3.hexo有两种_config.yml文件，一个是根目录下的全局的_config.yml,一个是themes下的</p>
</blockquote>
<h2 id="4-4-安装"><a href="#4-4-安装" class="headerlink" title="4.4 安装"></a>4.4 安装</h2><p>注意要先安装 node.js ，这里不再详细说明</p>
<pre><code>$npm install -g hexo
</code></pre><h2 id="4-5-初始化"><a href="#4-5-初始化" class="headerlink" title="4.5 初始化"></a>4.5 初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是 F:\Hexo ,由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p>
<pre><code>$cd /f/Hexo 
$hexo  init
</code></pre><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p>
<p><img src="/images/CreateMyBlog03.png" style="width: 600px;"></p>
<pre><code>$hexo g #生成
$hexo s #启动服务
</code></pre><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p>
<p><img src="/images/CreateMyBlog04.png" style="width: 600px;"><br>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p>
<p><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="external">http://blog.liuxianan.com/windows-port-bind.html</a></p>
<p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p>
<p><img src="/images/CreateMyBlog05.png" style="width: 600px;"></p>
<h2 id="4-6-修改主题"><a href="#4-6-修改主题" class="headerlink" title="4.6 修改主题"></a>4.6 修改主题</h2><p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <a href="https://hexo.io/themes/" target="_blank" rel="external">官方主题</a></p>
<p>我自己选的主题 <a href="https://github.com/Haojen/hexo-theme-Claudia.git" target="_blank" rel="external">hexo-theme-Claudia</a></p>
<p>首先下载这个主题：</p>
<pre><code>$ cd /d/Hexo
$ git clone https://github.com/Haojen/hexo-theme-Claudia.git  themes/Claudia
</code></pre><p>下载后的主题在这里：</p>
<p><img src="/images/CreateMyBlog06.png" style="width: 600px;"></p>
<p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: Claudia</code>，然后重新执行hexo g来重新生成。</p>
<p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p>
<h2 id="4-7-上传之前"><a href="#4-7-上传之前" class="headerlink" title="4.7 上传之前"></a>4.7 上传之前</h2><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p>
<h2 id="4-8-上传到github上"><a href="#4-8-上传到github上" class="headerlink" title="4.8 上传到github上"></a>4.8 上传到github上</h2><p>如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。</p>
<p>首先，ssh key肯定要配置好。</p>
<p>其次，配置_config.yml中有关deploy的部分：</p>
<p>正确写法：</p>
<pre><code>deploy:
    type: git
    repository: git@github.com:你的用户名/你的用户名.github.io.git
    branch: master
</code></pre><p>脚下留心： <strong>type及后面的repository，branch的冒号后面一定要有空格</strong></p>
<p>直接执行<code>hexo d</code>的话一般会报如下错误：</p>
<pre><code>Deployer not found: github 或者 Deployer not found: git
</code></pre><p>原因是需要安装一个插件，部署这个命令一定要用git bash：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>最后输入<code>hexo d</code>将代码全部提交到github上。</p>
<h2 id="4-10-常用hexo命令"><a href="#4-10-常用hexo命令" class="headerlink" title="4.10 常用hexo命令"></a>4.10 常用hexo命令</h2><pre><code>hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）
hexo deploy #部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本
</code></pre><h1 id="5-博客的编写"><a href="#5-博客的编写" class="headerlink" title="5 博客的编写"></a>5 博客的编写</h1><h2 id="5-1-博客一般格式"><a href="#5-1-博客一般格式" class="headerlink" title="5.1 博客一般格式"></a>5.1 博客一般格式</h2><pre><code> ---
 title: postName #文章页面上的显示名称，一般是中文
 date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改
 categories: 默认分类 #分类
 tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格
 description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
 ---

以下是正文
</code></pre><h2 id="5-2-正文的编写语法"><a href="#5-2-正文的编写语法" class="headerlink" title="5.2 正文的编写语法"></a>5.2 正文的编写语法</h2><p> 我这里用的Markdown，用的软件是一款在线编辑工具<a href="https://maxiang.io/" target="_blank" rel="external">马克飞象</a>，当然网上还有许多编辑工具，大家可以自己去查</p>
<h2 id="最后的说明–编辑文件的位置：source下的posts下的md文件"><a href="#最后的说明–编辑文件的位置：source下的posts下的md文件" class="headerlink" title=" 最后的说明–编辑文件的位置：source下的posts下的md文件"></a> 最后的说明–编辑文件的位置：source下的posts下的md文件</h2><p>本文的参考文章:<a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="external">http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p>
<p>详细的编写博客的教程，可以去百度：hexo编写博客</p>
]]></content>
      
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 个人网站搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/08/03/hello-world/</url>
      <content type="html"><![CDATA[<p><img src="/images/HelloWorld.jpg" alt="post-cover"></p>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> foo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
